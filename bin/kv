#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import base64
import hashlib
import json
import logging
import os
import sys
from argparse import ArgumentParser, FileType
from pathlib import Path
from sqlite3 import OperationalError, connect
from sys import stderr, stdout

VERSION = "1.2.0"

DROPBOX_HOME = "%s/Dropbox" % Path.home()
LOG_FILE = "/tmp/kv.debug.log"
DBFILE = "%s/kv.sqlite3" % DROPBOX_HOME
CONN = "file:%s" % DBFILE
DB = None


logging.basicConfig(
    filename=LOG_FILE,
    level=logging.DEBUG,
    format="%(asctime)s - %(levelname)s - %(message)s",
)


logging.debug("DB: %s, ARGS: %s" % (DBFILE, sys.argv[1:]))


def logError(e):
    stderr.write(str(e))
    logging.error(str(e))


#  DB.set_trace_callback(print)

TABLE_NAME = "kv"


class Colors:
    BLACK = "\033[0;30m"
    RED = "\033[0;31m"
    GREEN = "\033[0;32m"
    BROWN = "\033[0;33m"
    BLUE = "\033[0;34m"
    PURPLE = "\033[0;35m"
    CYAN = "\033[0;36m"
    LIGHT_GRAY = "\033[0;37m"
    DARK_GRAY = "\033[1;30m"
    LIGHT_RED = "\033[1;31m"
    LIGHT_GREEN = "\033[1;32m"
    YELLOW = "\033[1;33m"
    LIGHT_BLUE = "\033[1;34m"
    LIGHT_PURPLE = "\033[1;35m"
    LIGHT_CYAN = "\033[1;36m"
    LIGHT_WHITE = "\033[1;37m"
    BOLD = "\033[1m"
    FAINT = "\033[2m"
    ITALIC = "\033[3m"
    UNDERLINE = "\033[4m"
    BLINK = "\033[5m"
    NEGATIVE = "\033[7m"
    CROSSED = "\033[9m"
    END = "\033[0m"

    @staticmethod
    def red(string):
        return Colors.RED + string + Colors.END

    @staticmethod
    def gray(string):
        return Colors.DARK_GRAY + string + Colors.END


cli = ArgumentParser(
    prog="kv",
    description="Simple key value interface for cli",
    epilog="",
    usage="""
    # get value
    > kv get NODE_ENV
    # set key with value from pipe
    > cat file | kv set FILE_CONTENT
    """,
)
subparsers = cli.add_subparsers(dest="subcommand")

cli.add_argument("-V", "--version", action="version", version=f"%(prog)s {VERSION}")


def sha256(s):
    return hashlib.sha256(s.encode("utf-8")).hexdigest()


def base64encode(s):
    return base64.b64encode(s.encode("utf-8")).decode("utf-8")


def print_table(table):
    MAXCOLS = 30
    longest_cols = [
        (max([len(str(row[i])) for row in table]) + 3) for i in range(len(table[0]))
    ]
    row_format = "".join(
        ["{:<" + str(min(longest_col, MAXCOLS)) + "}" for longest_col in longest_cols]
    )
    for row in table:
        print(row_format.format(*row))


def print_lines(lines):
    row_format = Colors.GREEN + "{:<8}" + Colors.END + " : {}"
    for cols in lines:
        for col in cols:
            print(row_format.format(*col))
        print(Colors.gray("â”€" * 66))


def argument(*name_or_flags, **kwargs):
    """Convenience function to properly format arguments to pass to the
    subcommand decorator.
    """
    return (list(name_or_flags), kwargs)


# https://mike.depalatis.net/blog/simplifying-argparse.html
def subcommand(args=[], parent=subparsers):
    def decorator(func):
        parser = parent.add_parser(func.__name__, description=func.__doc__)
        for arg in args:
            parser.add_argument(*arg[0], **arg[1])
        parser.set_defaults(func=func)

    return decorator


@subcommand(
    [
        argument("key", type=str, nargs="?", help="key"),
        argument("-A", "--all", action="store_true", help="print all records in kv"),
        argument("-K", "--keys", action="store_true", help="only print keys"),
        argument("--debug", action="store_true", help="debug info"),
    ]
)
def get(args):
    try:
        cur = DB.cursor()
        if args.key:
            cur.execute(
                f"SELECT value FROM {TABLE_NAME} WHERE key=:key", {"key": args.key}
            )
            fields = cur.fetchone()
            if fields:
                stdout.write(str(fields[0]))
            else:
                if args.debug:
                    logError("kv: key [%s] not found" % args.key)
                return
        else:
            rows = cur.execute(
                f"""
                SELECT key, value, created_at, updated_at
                  FROM {TABLE_NAME}
              ORDER BY updated_at"""
            )
            if args.keys:
                # print all keys only
                for row in rows:
                    print(row[0])
                return
            if args.all:
                # print all when no key provided
                lines = []
                for row in rows:
                    lines.append(
                        [
                            ["Key", row[0]],
                            ["Created", row[2]],
                            ["Updated", row[3]],
                            ["Value", row[1]],
                        ]
                    )
                print_lines(lines)
            else:
                table = [["Key", "Created", "Updated"]]
                for row in rows:
                    table.append([row[0], row[2], row[3]])
                print_table(table)
    except OperationalError as e:
        logError(e)


def initDb():
    cur = DB.cursor()
    try:
        cur.executescript(
            f"""
            CREATE TABLE {TABLE_NAME} (
              key TEXT PRIMARY KEY,
              value TEXT,
              created_at datetime default current_timestamp,
              updated_at datetime default current_timestamp
            );
            INSERT INTO {TABLE_NAME} (key,value) VALUES ('VERSION', '%s');
            """
            % VERSION
        )
        stdout.write("=> Init kv store...")
    except OperationalError as e:
        logError(e)


@subcommand()
def init(args):
    initDb()


@subcommand()
def version(args):
    stdout.write(VERSION + "\n")


@subcommand(
    [
        argument("key", type=str, nargs=1, help="existing key"),
        argument("newkey", type=str, nargs=1, help="new key"),
    ]
)
def rename(args):
    (key,) = args.key
    (newkey,) = args.newkey
    cur = DB.cursor()
    try:
        cur.execute(
            f"""
            UPDATE {TABLE_NAME}
            SET key=:newkey, updated_at=CURRENT_TIMESTAMP
            WHERE key=:key
            """,
            {"key": key, "newkey": newkey},
        )
        DB.commit()
    except OperationalError as e:
        logError(e)
    finally:
        DB.close()


@subcommand(
    [
        argument("key", type=str, nargs=1, help="key"),
        argument("value", type=str, nargs="?", help="value", default=None),
        argument("--infile", type=FileType("r"), default="-"),
    ]
)
def set(args):
    (key,) = args.key
    value = None
    if args.value:
        value = args.value
    cur = DB.cursor()
    if args.value is None:
        value = args.infile.read()
    try:
        cur.execute(
            f"""
            INSERT INTO {TABLE_NAME}(key, value) values(:key, :value)
            ON CONFLICT(key) DO UPDATE
            SET value=:value, updated_at=CURRENT_TIMESTAMP
            WHERE key=:key
            """,
            {"key": key, "value": value},
        )
        DB.commit()
    except OperationalError as e:
        logError(e)
    finally:
        DB.close()


@subcommand([argument("key", type=str, nargs=1, help="key")])
def rm(args):
    (key,) = args.key
    cur = DB.cursor()
    try:
        cur.execute(f"DELETE FROM {TABLE_NAME} WHERE key=:key", {"key": key})
        DB.commit()
    except OperationalError as e:
        logError(e)
    finally:
        DB.close()


@subcommand()
def export(args):
    try:
        cur = DB.cursor()
        data = dict()
        data["version"] = "0.1"
        data["items"] = []
        for row in cur.execute(
            f"""
            SELECT key, value, created_at, updated_at
              FROM {TABLE_NAME} ORDER BY updated_at
            """
        ):
            data["items"].append(
                {
                    "key": row[0],
                    "value": base64encode(row[1]),
                    "checksum": sha256(row[1]),
                    "created": row[2],
                    "updated": row[3],
                }
            )
        print(json.dumps(data))
    except OperationalError as e:
        logError(e)


if __name__ == "__main__":
    args = cli.parse_args()
    try:
        DB = connect("%s?mode=rw" % CONN, uri=True)
    except OperationalError as e:
        nodbfile = "ERROR: %s | DBFILE: [%s]\n" % (str(e), CONN)
        logError(nodbfile)
        dirname = os.path.dirname(DBFILE)
        if not Path(dirname).exists():
            os.makedirs(dirname)
            print("=> creating dir: %s..." % dirname)
        print("=> creating dbfile: %s..." % DBFILE)
        # reconnect to db with default mode
        # default mode allows db to be created
        DB = connect(CONN, uri=True)
        initDb()
    if args.subcommand is None:
        cli.print_help()
    else:
        args.func(args)
